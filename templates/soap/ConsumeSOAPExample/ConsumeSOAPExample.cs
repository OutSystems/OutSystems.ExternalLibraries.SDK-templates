using System.Xml;
using System.ServiceModel;
using ServiceReference;
using OutSystems.ExternalLibraries.SDK;
using ConsumeSOAPExample.Structures;

namespace ConsumeSOAPExample{
    /* In this case, the OSInterface attribute is used to provide information about the Calculator interface to the ODC, 
        which will use this information to create an integration layer with a SOAP web service. */
    [OSInterface(Description = "Consume a Free SOAP web service in OutSystems Developer Cloud (ODC).", IconResourceName = "ConsumeSOAPExample.Resources.SOAP.jpg", Name = "SOAP")]
    public interface ICalculator
    {
        // This method is exposed as a server action to your ODC apps and libraries.
        [OSAction(Description = "The sum method takes two numbers as input parameters and returns their sum.", IconResourceName = "ConsumeSOAPExample.Resources.SOAP.jpg", ReturnName = "sum")]
        int Sum(
            [OSParameter(Description = "Number A & B as an integer")] Structures.Numbers numbers
        );
        // This method is exposed as a server action to your ODC apps and libraries.
        [OSAction(Description = "The subtraction method takes two numbers as input parameters and calculates the difference between the first number and the second number.", IconResourceName = "ConsumeSOAPExample.Resources.SOAP.jpg", ReturnName = "sub")]
        int Subtract(
            [OSParameter(Description = "Number A & B as an integer")] Structures.Numbers numbers
        );
    }
    public class Calculator : ICalculator
    {
        // Add calculator Web Service Soap Channel 
        private static readonly string ENDPOINTADDRESS = "https://ecs.syr.edu/faculty/fawcett/Handouts/cse775/code/calcWebService/Calc.asmx";
        private static readonly int TIMEOUT = 1000;
        private readonly BasicHttpBinding _binding;
        private readonly EndpointAddress _address;

        public Calculator()
        {
            _binding = new BasicHttpBinding
            {
                SendTimeout = TimeSpan.FromSeconds(TIMEOUT),
                MaxBufferSize = int.MaxValue,
                MaxReceivedMessageSize = int.MaxValue,
                AllowCookies = true,
                ReaderQuotas = XmlDictionaryReaderQuotas.Max,
                Security = new BasicHttpSecurity 
                {
                    Mode = BasicHttpSecurityMode.Transport
                }
            };
            _address = new EndpointAddress(ENDPOINTADDRESS);
        }
        public int Sum(Numbers numbers)
        {
           /* This line calls the AddAsync method (defined later in the code), which asynchronously calls a SOAP service to add NumberA and NumberB.Once the result is returned, it is stored in the sum variable. */
           return AddAsync(numbers).Result;
        }
        private async Task<int> AddAsync(Numbers numbers) 
        {
           /* This line creates a new instance of the CalculatorWebServiceSoapClient class, which is generated by dotnet-svcutil when you add a reference to a SOAP service. The using statement ensures that the proxy is properly disposed of when the method completes. */       
            using (var proxy = new CalculatorWebServiceSoapClient(_binding, _address))
            {
                /* This line asynchronously calls the AddAsync method of the CalculatorWebServiceSoapClient class, passing in NumberA and NumberB from the numbers parameter. The await keyword suspends the execution of the method until the result is returned from the service. */
                var result = await proxy.AddAsync(numbers.NumberA, numbers.NumberB);
                return result;
            }
        }
        public int Subtract(Numbers numbers)
        {
            /* This line calls the AddAsync method (defined later in the code), which asynchronously calls a SOAP service to add NumberA and NumberB.Once the result is returned, it is stored in the sum variable. */
            return SubtractAsync(numbers).Result;
        }
        private async Task<int> SubtractAsync(Numbers numbers) 
        {
            /* This line creates a new instance of the CalculatorWebServiceSoapClient class, which is generated by dotnet-svcutil when you add a reference to a SOAP service. The using statement ensures that the proxy is properly disposed of when the method completes. */       
            using (var proxy = new CalculatorWebServiceSoapClient(_binding, _address))
            {
                /* This line asynchronously calls the AddAsync method of the CalculatorWebServiceSoapClient class, passing in NumberA and NumberB from the numbers parameter. The await keyword suspends the execution of the method until the result is returned from the service. */
                var result = await proxy.SubtractAsync(numbers.NumberA, numbers.NumberB);
                return result;
            }
        }
    }
}

